{'TMP': 'C:\\Users\\pc\\AppData\\Local\\Temp', 'COMPUTERNAME': 'DESKTOP-AGS798F', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'VSSDK140INSTALL': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VSSDK\\', 'USERDOMAIN': 'DESKTOP-AGS798F', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 37 Stepping 5, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '2505', 'SYSTEMROOT': 'C:\\Windows', 'HOME': 'C:\\Users\\pc', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'TK_LIBRARY': 'C:\\Python27\\tcl\\tk8.5', 'TEMP': 'C:\\Users\\pc\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'TIX_LIBRARY': 'C:\\Python27\\tcl\\tix8.4.3', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\pc\\AppData\\Local', 'HOMEPATH': '\\Users\\pc', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-AGS798F', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'pc', 'LOGONSERVER': '\\\\MicrosoftAccount', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'TCL_LIBRARY': 'C:\\Python27\\tcl\\tcl8.5', 'PATH': 'C:\\Python27\\;C:\\Python27\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Dell\\DW WLAN Card;C:\\Program Files\\nodejs\\;C:\\Users\\pc\\.dnx\\bin;C:\\Program Files\\Microsoft DNX\\Dnvm\\;C:\\Program Files (x86)\\QuickTime\\QTSystem\\;C:\\Python27\\;C:\\Users\\pc\\AppData\\Roaming\\npm;C:\\Users\\pc\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\pc\\AppData\\Local\\Programs\\Git\\mingw64\\bin;C:\\Users\\pc\\AppData\\Local\\Programs\\Git\\usr\\bin', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'WINDIR': 'C:\\Windows', 'MOZ_PLUGIN_PATH': 'C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\plugins\\', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\pc\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\pc'}